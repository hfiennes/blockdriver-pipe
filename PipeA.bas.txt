   10REM >PipeA
   20*|
   30*| Alternative block driver specification
   40*|
   50*| Pipe (End A)
   60*|
   70*| Version 1.05 17-August-1994 Hugo Fiennes
   80*|
   90DIM code 8192
  100
  110date$=MID$(TIME$,5,11):z$=CHR$0
  120FORI%=0TO8192STEP4:code!I%=0:NEXT
  130
  140V=1<<28
  150C=1<<29
  160Z=1<<30
  170N=1<<31
  180
  190driver_number       = 128
  200
  210flag_morethanone    = &00000001
  220flag_splitrates     = &00000002
  230flag_hardwarefifo   = &00000004
  240flag_controlbreak   = &00000008
  250flag_requirespoll   = &00000010
  260flag_wontempty      = &00000020
  270flag_supportsblock  = &00000040
  280flag_dontovio       = &00000080
  290flag_supportsinq    = &00000100
  300
  310FORpass=0TO2STEP2
  320P%=code
  330[OPT pass
  340.entry
  350      stmfd   r13!,{r14}
  360      and     r1,r1,#&ff
  370      cmp     r0,#((endoftable-table)/4)
  380      addcc   pc,pc,r0,lsl#2
  390      ldmfd   r13!,{pc}^
  400
  410.table
  420      bal     put_byte
  430      bal     get_byte
  440      bal     put_block
  450      bal     get_block
  460      bal     check_tx
  470      bal     check_rx
  480      bal     flush_tx
  490      bal     flush_rx
  500      bal     control_lines
  510      bal     read_modem_control
  520      bal     read_rx_errors
  530      bal     send_break
  540      bal     examine_byte
  550      bal     speed
  560      bal     speed
  570      bal     wordformat
  580      bal     flowcontrol
  590      bal     initialise
  600      bal     closedown
  610.endoftable
  620
  630      FNcheck_and_set(&80)
  640.driverinfo
  650      equs    "Virtual Pipe (end A)"+z$
  660
  670      FNcheck_and_set(&A0)
  680.manufacturerinfo
  690      equs    "The Serial Port"+z$
  700
  710      FNcheck_and_set(&C0)
  720.version
  730      equd    &00010005     ; v1.05
  740.flags
  750      equd    flag_morethanone + flag_wontempty + flag_supportsinq + (15<<24)
  760.drivernumber
  770      equd    driver_number<<8
  780
  790      FNcheck_and_set(&100)
  800.speeds
  810      equd     19200
  820      equd         0
  830
  840      FNcheck_and_set(&180)
  850;--- Put byte routine ---------------------------------------------------
  860.put_byte
  870      mov     r0,r1
  880      and     r1,r2,#&ff
  890      swi     "ARCbbsPipes_OutputWrite"
  900      ldmfd   r13!,{pc}^
  910
  920;--- Get byte routine ---------------------------------------------------
  930.get_byte
  940      mov     r0,r1
  950      swi     "ARCbbsPipes_InputRead"
  960      ldmfd   r13!,{pc}^
  970
  980;--- Put block ----------------------------------------------------------
  990.put_block
 1000      ldmfd   r13!,{pc}^
 1010
 1020;--- Get block ----------------------------------------------------------
 1030.get_block
 1040      ldmfd   r13!,{pc}^
 1050
 1060;--- Check TX buffer ----------------------------------------------------
 1070.check_tx
 1080      mov     r0,r1
 1090      swi     "ARCbbsPipes_OutputStatus"
 1100      ldmfd   r13!,{pc}^
 1110
 1120;--- Check RX buffer ----------------------------------------------------
 1130.check_rx
 1140      mov     r0,r1
 1150      swi     "ARCbbsPipes_InputStatus"
 1160      ldmfd   r13!,{pc}^
 1170
 1180;--- Flush TX buffer ----------------------------------------------------
 1190.flush_tx
 1200      mov     r0,r1
 1210      swi     "ARCbbsPipes_ClearOutput"
 1220      ldmfd   r13!,{pc}^
 1230
 1240;--- Flush RX buffer ----------------------------------------------------
 1250.flush_rx
 1260      mov     r0,r1
 1270      swi     "ARCbbsPipes_ClearInput"
 1280      ldmfd   r13!,{pc}^
 1290
 1300;--- Control lines ------------------------------------------------------
 1310.control_lines
 1320      stmfd   r13!,{r1-r2}
 1330      mov     r0,r1
 1340      swi     "ARCbbsPipes_ReadStatus"
 1350      mov     r3,r0
 1360      bic     r0,r0,#&f
 1370      ldr     r2,[r13,#4]
 1380      orr     r1,r0,r2
 1390      ldr     r0,[r13]
 1400      swi     "ARCbbsPipes_WriteStatus"
 1410
 1420      mov     r0,r3
 1430      ldmfd   r13!,{r1-r2}
 1440      ldmfd   r13!,{pc}^
 1450
 1460;--- Read modem control lines -------------------------------------------
 1470.read_modem_control
 1480      mov     r0,r1
 1490      swi     "ARCbbsPipes_ReadStatus"
 1500      tst     r0,#(1<<4)    ; DTR?
 1510      moveq   r0,#%0011     ; (no DCD)
 1520      movne   r0,#%1011     ; DCD set
 1530      ldmfd   r13!,{pc}^
 1540
 1550;--- Read RX errors -----------------------------------------------------
 1560.read_rx_errors
 1570      mov     r0,#0
 1580      ldmfd   r13!,{pc}^
 1590
 1600;--- Send break ---------------------------------------------------------
 1610.send_break
 1620      ldmfd   r13!,{pc}^
 1630
 1640;--- Examine byte -------------------------------------------------------
 1650.examine_byte
 1660      mov     r0,r1
 1670      swi     "ARCbbsPipes_InputPeek"
 1680      ldmfd   r13!,{pc}^
 1690
 1700;--- Set speed ----------------------------------------------------------
 1710.speed
 1720      mov     r0,#19200
 1730      ldmfd   r13!,{pc}^
 1740
 1750;--- Set word format ----------------------------------------------------
 1760.wordformat
 1770      mov     r0,#0
 1780      ldmfd   r13!,{pc}^
 1790
 1800;--- Set flow control ---------------------------------------------------
 1810.flowcontrol
 1820      ldmfd   r13!,{pc}^
 1830
 1840;--- Initialise driver --------------------------------------------------
 1850.initialise
 1860      stmfd   r13!,{r1-r4}
 1870      adr     r0,command
 1880      swi     "XOS_CLI"
 1890      addvs   r0,r0,#4
 1900      movvc   r0,#0
 1910      ldmfd   r13!,{r1-r4}
 1920      ldmfd   r13!,{pc}^
 1930
 1940.command
 1950      equs    "RMEnsure ARCbbs_Pipes 0.10 RMLoad <SerialDev$Path>Modules.PipeA.PipeModule"+CHR$0
 1960      align
 1970
 1980;--- Close down driver --------------------------------------------------
 1990.closedown
 2000      ldmfd   r13!,{pc}^
 2010]
 2020NEXT
 2030LOADATN"OS_File",10,"SerialDev:Modules.PipeA.Driver",&FFD,,code,P%
 2040LOADATN"OS_File",10,"spec.!serialdev.Modules.PipeA.Driver",&FFD,,code,P%
 2050END
 2060DEFFNcheck_and_set(A%):IF (P%-code)>A% ERROR 1,"Block &"+STR$~A%+" exceeded"::=0ELSEP%=code+A%:=0
